<?php

namespace Tests\Feature;

use App\Category;
use App\Content;
use App\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class ContentTest extends TestCase
{

    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $user = factory(User::class)->create();
        Auth::loginUsingId($user->id);
    }

    /** @test */
    public function see_page_to_create_content()
    {
        $this->get(route('content.create'))
            ->assertStatus(200);
    }

    /** @test */
    public function list_contents()
    {
        $this->withoutExceptionHandling();

        $contents = factory(Content::class, 5)->create(['user_id' => Auth::user()->id]);

        $this->get(route('content.index'))
            ->assertStatus(200)
            ->assertSee($contents[1]->title);
    }

    /** @test */
    public function cant_see_content_from_another_user()
    {
        $this->withoutExceptionHandling();

        $content = factory(Content::class)->create();

        $this->get(route('content.index'))
            ->assertDontSee($content->title);
    }

    /** @test */
    public function create_a_new_content()
    {
        $this->post(route("content.store"), [
            'title' => 'Content Name',
            'content' => 'Test Content',
            'category_id' => factory(Category::class)->create()->id
        ])->assertStatus(302);

        $this->assertDatabaseHas("contents", ['title' => 'Content Name']);
    }

    /** @test */
    public function update_a_content()
    {
        $content = factory(Content::class)->create(['user_id' => Auth::user()->id]);

        $this->assertDatabaseHas("contents", ['title' => $content->title]);

        $this->put(route("content.update"), [
            'id' => $content->id,
            'title' => 'New Name',
            'content' => 'Test Content',
            'category_id' => $content->category_id
        ])->assertStatus(302);

        $this->assertEquals($content->fresh()->title, 'New Name');
    }

    /** @test */
    public function see_content_in_feed()
    {
        $content = factory(Content::class)->create([
            'user_id' => Auth::user()->id
        ]);

        $this->get(route('content.feed'))
            ->assertSee($content->content);
    }

    /** @test */
    public function mark_content_as_reviewed()
    {
        $content = factory(Content::class)->create([
            'user_id' => Auth::user()->id,
            'last_review_date' => '2019-10-10'
        ]);

        $this->put(route('content.markAsReviewed', ['id' => $content->id]))
            ->assertStatus(200);

        $this->assertEquals(date('Y-m-d'), $content->fresh()->last_review_date->format('Y-m-d'));
        $this->assertEquals(Carbon::now()->addDay()->format('Y-m-d'), $content->fresh()->next_review_date->format('Y-m-d'));
    }
}
